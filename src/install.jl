function install(m::Module; kw...)
    options = read_options(m; kw...)
    return install(m, options)
end

function print_install_help(io::IO)
    println(io, "Comonicon - Installation CLI.")
    println(io)
    println(io, "Install the CLI script to `.julia/bin` if not specified with subcommands.")
    println(io)
    printstyled(io, "USAGE\n\n"; bold = true)
    printstyled(io, " "^4, "julia --project deps/build.jl [command]\n\n"; color = :cyan)
    printstyled(io, "COMMAND\n\n"; bold = true)

    printstyled(io, " "^4, "app"; color = :light_blue, bold = true)
    printstyled(io, " [tarball]"; color = :blue)
    println(io, " "^15, "build the application, optionally make a tarball.\n")

    printstyled(io, " "^4, "sysimg"; color = :light_blue, bold = true)
    printstyled(io, " [tarball]"; color = :blue)
    println(io, " "^12, "build the system image, optionally make a tarball.\n")

    printstyled(io, " "^4, "tarball"; color = :light_blue, bold = true)
    println(io, " "^21, "build application and system image then make tarballs")
    println(io, " "^32, "for them.\n")

    printstyled(io, "EXAMPLE\n\n"; bold = true)
    printstyled(io, " "^4, "julia --project deps/build.jl sysimg\n\n"; color = :cyan)
    println(
        io,
        " "^4,
        "build the system image in the path defined by Comonicon.toml or in deps by default.\n\n",
    )
    printstyled(io, " "^4, "julia --project deps/build.jl sysimg tarball\n\n"; color = :cyan)
    println(io, " "^4, "build the system image then make a tarball on this system image.\n\n")
    printstyled(io, " "^4, "julia --project deps/build.jl app tarball\n\n"; color = :cyan)
    println(
        io,
        " "^4,
        "build the application based on Comonicon.toml and make a tarball from it.\n\n",
    )
end

function install(m::Module, options::ComoniconOptions.Comonicon)
    if isempty(ARGS)
        if options.install.quiet
            logger = NullLogger()
        else
            logger = ConsoleLogger()
        end

        with_logger(logger) do
            install_script(m, options)
        end
        return
    elseif "-h" in ARGS || "--help" in ARGS || "help" in ARGS
        return print_install_help(stdout)
    elseif first(ARGS) == "sysimg" && !isnothing(options.sysimg)
        if length(ARGS) == 1
            return build_sysimg(m, options)
        elseif length(ARGS) == 2 && ARGS[2] == "tarball"
            return build_tarball_sysimg(m, options)
        end
    elseif first(ARGS) == "app" && !isnothing(options.application)
        if length(ARGS) == 1
            return build_application(m, options)
        elseif length(ARGS) == 2 && ARGS[2] == "tarball"
            return build_tarball_app(m, options)
        end
    elseif first(ARGS) == "tarball" && (!isnothing(options.sysimg) || !isnothing(options.application))
        if length(ARGS) == 1
            return build_tarball(m, options)
        end
    end
end

"install a script as the CLI"
function install_script(m::Module, options::ComoniconOptions.Comonicon; project=pkgdir(m))
    bin = expanduser(joinpath(options.install.path, "bin"))
    shadow = joinpath(bin, options.name * ".jl")

    if isnothing(options.sysimg)
        sysimg = nothing
    else
        download_sysimg(m, options)
        sysimg = pkgdir(m, options.sysimg.path, "lib", sysimg(options.name))
    end

    shell_script = cmd_script(
        m,
        shadow;
        project,
        sysimg = sysimg,
        compile = options.install.compile,
        optimize = options.install.optimize,
    )
    file = joinpath(bin, options.name)

    # start writing
    if !ispath(bin)
        @info "cannot find Julia bin folder creating $bin"
        mkpath(bin)
    end

    # generate contents
    @info "generating $shadow"
    open(shadow, "w+") do f
        println(
            f,
            "#= generated by Comonicon for $(options.name) =# using $m; exit($m.command_main())",
        )
    end

    @info "generating $file"
    open(file, "w+") do f
        println(f, shell_script)
    end

    if options.install.completion
        install_completion(m, options)
    end

    chmod(file, 0o777)
    return
end

function install_completion(m::Module, options::ComoniconOptions.Comonicon, shell=detect_shell())
    completions_dir = expanduser(joinpath(options.install.path, "completions"))
    isnothing(shell) && return

    @info "generating auto-completion script for $shell"
    script = completion_script(shell, m)
    script === nothing && return

    if !ispath(completions_dir)
        mkpath(completions_dir)
    end

    completion_file = joinpath(completions_dir, "_" * options.name)
    @info "writing to $completion_file"
    write(completion_file, script)
    return
end
